package com.kfouri.opentest.ui.view

import android.os.Bundle
import androidx.navigation.fragment.findNavController
import android.view.LayoutInflater
import android.view.Menu
import android.view.MenuInflater
import android.view.View
import android.view.ViewGroup
import android.widget.SearchView
import android.widget.Toast
import androidx.databinding.DataBindingUtil
import androidx.fragment.app.Fragment
import androidx.lifecycle.ViewModelProvider
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.kfouri.opentest.R
import com.kfouri.opentest.adapter.HeroListAdapter
import com.kfouri.opentest.api.HeroService
import com.kfouri.opentest.api.NetworkConstants.OFFSET
import com.kfouri.opentest.api.Status
import com.kfouri.opentest.databinding.FragmentHeroListBinding
import com.kfouri.opentest.model.HeroApiModel
import com.kfouri.opentest.ui.viewmodel.HeroListViewModel
import com.kfouri.opentest.ui.viewmodel.ViewModelFactory

class HeroListFragment: Fragment() {

    private lateinit var binding: FragmentHeroListBinding
    private lateinit var viewModel: HeroListViewModel
    private val heroListAdapter by lazy {
        activity?.let { HeroListAdapter(it.applicationContext) { id: Int -> itemClicked(id) } }
    }
    private var searchView : SearchView? = null
    private var isSearching = false

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_hero_list, container, false)
        viewModel = ViewModelProvider(this,
            ViewModelFactory(HeroApiModel(HeroService())))[HeroListViewModel::class.java]
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        setRecyclerView()
        setObservers()
        setHasOptionsMenu(true)

        binding.progressBar.visibility = View.GONE

        if (heroListAdapter?.itemCount == 0) {
            viewModel.getHeroList()
        }

    }

    private fun setRecyclerView() {
        binding.recyclerView.apply {
            layoutManager = LinearLayoutManager(activity, LinearLayoutManager.VERTICAL, false)
            adapter = heroListAdapter
        }

        binding.recyclerView.addOnScrollListener(object: RecyclerView.OnScrollListener() {
            override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {
                super.onScrolled(recyclerView, dx, dy)
                heroListAdapter?.itemCount.let { count ->
                    if (count != null) {
                        if (!binding.recyclerView.canScrollVertically(1) && count > 0) {
                            if (viewModel.currentOffset <= viewModel.totalHeroes) {
                                viewModel.currentOffset += OFFSET
                                if (isSearching) {
                                    viewModel.searchHero()
                                } else {
                                    viewModel.getHeroList()
                                }
                            }
                        }
                    }
                }
            }
        })
    }

    private fun setObservers() {
        activity?.let { it ->
            viewModel.heroListLiveData.observe(it, { consumable ->
                consumable.consume {
                    when(it.status) {
                        Status.LOADING -> {
                            binding.progressBar.visibility = View.VISIBLE
                        }
                        Status.SUCCESS -> {
                            binding.progressBar.visibility = View.GONE
                            viewModel.totalHeroes = it.data?.data?.total?: 0
                            it.data?.data?.results.let { list ->
                                list?.let { it1 -> heroListAdapter?.setData(it1) }
                            }
                        }
                        Status.ERROR -> {
                            binding.progressBar.visibility = View.GONE
                            Toast.makeText(activity?.applicationContext, "Error: " + it.message, Toast.LENGTH_LONG).show()
                        }
                    }
                }
            })

            viewModel.heroSearchLiveData.observe(it, {
                when(it.status) {
                    Status.LOADING -> {
                        binding.progressBar.visibility = View.VISIBLE
                    }
                    Status.SUCCESS -> {
                        binding.progressBar.visibility = View.GONE
                        viewModel.totalHeroes = it.data?.data?.total?: 0
                        it.data?.data?.results.let { list ->
                            list?.let { it1 ->
                                heroListAdapter?.setData(it1)
                            }
                        }
                    }
                    Status.ERROR -> {
                        binding.progressBar.visibility = View.GONE
                        Toast.makeText(activity?.applicationContext, "Error: " + it.message, Toast.LENGTH_LONG).show()
                    }
                }
            })
        }
    }

    private fun itemClicked(id: Int) {
        val action = HeroListFragmentDirections.actionHeroListFragmentToHeroDetailFragment(id)
        findNavController().navigate(action)
    }

    override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {
        inflater.inflate(R.menu.menu, menu)

        val searchItem = menu.findItem(R.id.action_search)
        searchView = searchItem?.actionView as SearchView

        searchView?.setOnQueryTextListener(object : SearchView.OnQueryTextListener {
            override fun onQueryTextSubmit(query: String?): Boolean {
                query?.let {
                    heroListAdapter?.clearData()
                    viewModel.currentOffset = 0
                    viewModel.nameStartsWith = query
                    viewModel.searchHero()
                }
                return true
            }

            override fun onQueryTextChange(newText: String?): Boolean {
                return false
            }
        })

        searchView?.setOnSearchClickListener {
            isSearching = true
        }

        searchView?.setOnCloseListener {
            isSearching = false
            viewModel.nameStartsWith = ""
            false
        }
    }
}