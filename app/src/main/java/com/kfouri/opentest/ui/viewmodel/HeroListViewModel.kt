package com.kfouri.opentest.ui.viewmodel

import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import com.kfouri.opentest.api.NetworkConstants.OFFSET
import com.kfouri.opentest.api.Resource
import com.kfouri.opentest.api.model.HeroResponse
import com.kfouri.opentest.model.IHeroApiModel
import com.kfouri.opentest.util.ConsumableValue
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Job
import kotlinx.coroutines.launch

class HeroListViewModel(
    private val model: IHeroApiModel
): ViewModel(), CoroutineScope {

    override val coroutineContext = Job()

    private val heroListMutableLiveData = MutableLiveData<ConsumableValue<Resource<HeroResponse>>>()
    val heroListLiveData: LiveData<ConsumableValue<Resource<HeroResponse>>>
        get() = heroListMutableLiveData

    private val heroSearchMutableLiveData = MutableLiveData<Resource<HeroResponse>>()
    val heroSearchLiveData: LiveData<Resource<HeroResponse>>
        get() = heroSearchMutableLiveData

    var currentOffset = 0
    var totalHeroes = 0
    var nameStartsWith: String = ""

    fun getHeroList() {
        launch {
            heroListMutableLiveData.postValue(ConsumableValue(Resource.loading(data = null)))
            try {
                heroListMutableLiveData.postValue(ConsumableValue(
                    model.getHeroList(currentOffset.toString(), OFFSET.toString()))
                )
            } catch (e: Exception) {
                heroListMutableLiveData.postValue(ConsumableValue(
                    Resource.error(data = null, message = e.message ?: "Error getting Hero List"))
                )
            }
        }
    }

    fun searchHero() {
        launch {
            heroSearchMutableLiveData.postValue(Resource.loading(data = null))
            try {
                heroSearchMutableLiveData.postValue(
                    model.getSearchHero(nameStartsWith, currentOffset.toString(), OFFSET.toString()),
                )
            } catch (e: Exception) {
                heroSearchMutableLiveData.postValue(
                    Resource.error(data = null, message = e.message ?: "Error searching Hero")
                )
            }
        }
    }
}