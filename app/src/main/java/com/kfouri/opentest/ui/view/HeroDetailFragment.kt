package com.kfouri.opentest.ui.view

import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.databinding.DataBindingUtil
import androidx.fragment.app.Fragment
import androidx.lifecycle.ViewModelProvider
import androidx.navigation.fragment.navArgs
import androidx.recyclerview.widget.LinearLayoutManager
import com.kfouri.opentest.R
import com.kfouri.opentest.adapter.ComicsAdapter
import com.kfouri.opentest.api.HeroService
import com.kfouri.opentest.api.Status
import com.kfouri.opentest.api.model.Results
import com.kfouri.opentest.databinding.FragmentHeroDetailBinding
import com.kfouri.opentest.model.HeroApiModel
import com.kfouri.opentest.ui.GlideApp
import com.kfouri.opentest.ui.viewmodel.HeroDetailViewModel
import com.kfouri.opentest.ui.viewmodel.ViewModelFactory

class HeroDetailFragment: Fragment() {

    private val args: HeroDetailFragmentArgs by navArgs()

    private lateinit var binding: FragmentHeroDetailBinding
    private lateinit var viewModel: HeroDetailViewModel

    private val comicsAdapter by lazy {
        ComicsAdapter()
    }

    private var heroId: Int = 0

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_hero_detail, container, false)
        viewModel = ViewModelProvider(this,
            ViewModelFactory(HeroApiModel(HeroService()))
        )[HeroDetailViewModel::class.java]
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        heroId = args.id

        setObservers()
        setRecyclerView()

        viewModel.getHeroDetail(heroId.toString())
    }

    private fun setObservers() {
        activity?.let { it ->
            viewModel.heroDetailLiveData.observe(it, {
                when(it.status) {
                    Status.LOADING -> {
                        binding.progressBar.visibility = View.VISIBLE
                    }
                    Status.SUCCESS -> {
                        binding.progressBar.visibility = View.GONE
                        it.data?.data?.results.let { list ->
                            list?.let { it1 -> showData(it1[0]) }
                        }
                    }
                    Status.ERROR -> {
                        binding.progressBar.visibility = View.GONE
                        Toast.makeText(activity?.applicationContext, "Error: " + it.message, Toast.LENGTH_LONG).show()
                        Log.d("Kafu", "Error: $it.message")
                    }
                }
            })
        }
    }

    private fun showData(results: Results) {
        binding.textViewName.text = results.name
        binding.textViewDescription.text = results.description
        activity?.let {
            GlideApp.with(it.applicationContext)
                .load("${results.thumbnail.path}.${results.thumbnail.extension}")
                .into(binding.imageViewThumbnail)
        }
        comicsAdapter.setData(results.comics.items)
        if (results.comics.items.isEmpty()) {
            binding.cardViewComics.visibility = View.GONE
        } else {
            binding.cardViewComics.visibility = View.VISIBLE
        }
    }

    private fun setRecyclerView() {
        binding.recyclerViewComic .apply {
            layoutManager = LinearLayoutManager(activity, LinearLayoutManager.VERTICAL, false)
            adapter = comicsAdapter
        }
    }
}