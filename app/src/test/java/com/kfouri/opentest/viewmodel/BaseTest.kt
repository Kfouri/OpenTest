package com.kfouri.opentest.viewmodel

import androidx.arch.core.executor.testing.InstantTaskExecutorRule
import com.kfouri.opentest.api.IHeroService
import com.kfouri.opentest.api.model.Involved
import com.kfouri.opentest.api.model.Items
import com.kfouri.opentest.api.model.Results
import com.kfouri.opentest.api.model.Thumbnail
import com.kfouri.opentest.model.HeroApiModel
import com.kfouri.opentest.model.IHeroApiModel
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.test.TestCoroutineDispatcher
import kotlinx.coroutines.test.TestCoroutineScope
import kotlinx.coroutines.test.resetMain
import kotlinx.coroutines.test.setMain
import org.junit.After
import org.junit.Before
import org.junit.Rule
import org.mockito.Mockito

@ExperimentalCoroutinesApi
open class BaseTest() {

    companion object {

        private val hero = Results(1,
            "name 1",
            "description 1",
            Thumbnail("path 1", "extension 1"),
            Involved(1, listOf(Items("uri", "name"))),
            Involved(1, listOf(Items("uri", "name"))),
            Involved(1, listOf(Items("uri", "name"))),
            Involved(1, listOf(Items("uri", "name")))
        )

        internal val heroList = listOf(hero, hero, hero)
        internal val heroDetail = listOf(hero)

    }

    private val testCoroutineDispatcher = TestCoroutineDispatcher()
    private val testCoroutineScope = TestCoroutineScope(testCoroutineDispatcher)
    protected lateinit var heroService: IHeroService
    protected lateinit var heroApiModel: IHeroApiModel

    @get:Rule
    val rule = InstantTaskExecutorRule()

    @After
    fun onAfter() {
        Dispatchers.resetMain()
        testCoroutineDispatcher.cleanupTestCoroutines()
        testCoroutineScope.cleanupTestCoroutines()
    }

    @Before
    open fun onBefore() {
        Dispatchers.setMain(testCoroutineDispatcher)

        heroService = Mockito.mock(IHeroService::class.java)
        heroApiModel = HeroApiModel(heroService)
    }
}