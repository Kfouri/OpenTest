package com.kfouri.opentest.viewmodel

import com.kfouri.opentest.api.Resource
import com.kfouri.opentest.api.Status
import com.kfouri.opentest.api.model.Data
import com.kfouri.opentest.api.model.HeroResponse
import com.kfouri.opentest.extension.observeOnce
import com.kfouri.opentest.ui.viewmodel.HeroDetailViewModel
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.runBlocking
import org.junit.Assert
import org.junit.Before
import org.junit.Test
import org.mockito.Mockito

@ExperimentalCoroutinesApi
class HeroDetailViewModelTest : BaseTest() {

    private lateinit var viewModel: HeroDetailViewModel

    @Before
    override fun onBefore() {
        super.onBefore()
        viewModel = HeroDetailViewModel(heroApiModel)
    }

    @Test
    fun getHeroDetailSuccessful() = runBlocking {
        //Given
        val response = Resource(
            Status.SUCCESS,
            HeroResponse(
                Data(1,
                    heroDetail
                )
            ),
            ""
        )

        Mockito.`when`(heroService.getHeroDetail("1"))
            .thenReturn(response)

        //When
        viewModel.getHeroDetail("1")

        //Then
        viewModel.heroDetailLiveData.observeOnce {
            Assert.assertEquals(Status.SUCCESS, it.status)
        }
    }

    @Test
    fun getHeroDetailError() = runBlocking {
        //Given
        val response = Resource(
            Status.ERROR,
            null,
            ""
        )

        Mockito.`when`(heroService.getHeroDetail("1"))
            .thenReturn(response)

        //When
        viewModel.getHeroDetail("1")

        //Then
        viewModel.heroDetailLiveData.observeOnce {
            Assert.assertEquals(Status.ERROR, it.status)
        }
    }
}