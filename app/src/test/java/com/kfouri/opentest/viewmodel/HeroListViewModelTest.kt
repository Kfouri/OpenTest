package com.kfouri.opentest.viewmodel

import com.kfouri.opentest.api.Resource
import com.kfouri.opentest.api.Status
import com.kfouri.opentest.api.model.Data
import com.kfouri.opentest.api.model.HeroResponse
import com.kfouri.opentest.extension.observeOnce
import com.kfouri.opentest.ui.viewmodel.HeroListViewModel
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.runBlocking
import org.junit.Assert
import org.junit.Before
import org.junit.Test
import org.mockito.Mockito

@ExperimentalCoroutinesApi
class HeroListViewModelTest : BaseTest() {

    private lateinit var viewModel: HeroListViewModel

    @Before
    override fun onBefore() {
        super.onBefore()
        viewModel = HeroListViewModel(heroApiModel)
    }

    @Test
    fun getHeroListSuccessful() = runBlocking {
        //Given
        val response = Resource(
            Status.SUCCESS,
            HeroResponse(
                Data(1,
                    heroList
                )
            ),
            ""
        )

        Mockito.`when`(heroService.getHeroList("1", "1"))
            .thenReturn(response)

        //When
        viewModel.getHeroList()

        //Then
        viewModel.heroListLiveData.observeOnce {
            Assert.assertEquals(Status.SUCCESS, it.consume { consume -> consume.status})
        }
    }

    @Test
    fun getCharacterListError() = runBlocking {
        //Given
        val response = Resource(
            Status.ERROR,
            null,
            ""
        )

        Mockito.`when`(heroService.getHeroList("1", "1"))
            .thenReturn(response)

        //When
        viewModel.getHeroList()

        //Then
        viewModel.heroListLiveData.observeOnce {
            Assert.assertEquals(Status.SUCCESS, it.consume { consume -> consume.status})
        }
    }

    @Test
    fun getHeroSearchSuccessful() = runBlocking {
        //Given
        val response = Resource(
            Status.SUCCESS,
            HeroResponse(
                Data(1,
                    heroList
                )
            ),
            ""
        )

        Mockito.`when`(heroService.getSearchHero("Thor", "1", "1"))
            .thenReturn(response)

        //When
        viewModel.searchHero()

        //Then
        viewModel.heroListLiveData.observeOnce {
            Assert.assertEquals(Status.SUCCESS, it.consume { consume -> consume.status})
        }
    }
}